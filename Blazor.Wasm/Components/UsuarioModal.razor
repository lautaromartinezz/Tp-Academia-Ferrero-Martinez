@using DTOs
@using API.Clients
@using System.Text.RegularExpressions
@inject IJSRuntime JSRuntime

@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (mode == FormMode.Add)
                        {
                            <text>Agregar</text>
                        }
                        else
                        {
                            <text>Editar</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="formData" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        @if (mode == FormMode.Update)
                        {
                            <div class="mb-3">
                                <label class="form-label">Id</label>
                                <input type="text" class="form-control" value="@formData.Usuario.Id" readonly />
                            </div>
                        }

                        <div class="mb-3">
                            <label class="form-label">Nombre *</label>
                            <InputText @bind-Value="formData.Usuario.Nombre" class="form-control" />
                            @if (validationErrors.ContainsKey("Nombre"))
                            {
                                <div class="text-danger small">@validationErrors["Nombre"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Apellido *</label>
                            <InputText @bind-Value="formData.Usuario.Apellido" class="form-control" />
                            @if (validationErrors.ContainsKey("Apellido"))
                            {
                                <div class="text-danger small">@validationErrors["Apellido"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email *</label>
                            <InputText @bind-Value="formData.Usuario.Email" class="form-control" />
                            @if (validationErrors.ContainsKey("Email"))
                            {
                                <div class="text-danger small">@validationErrors["Email"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Nombre Usuario *</label>
                            <InputText @bind-Value="formData.Usuario.NombreUsuario" class="form-control" />
                            @if (validationErrors.ContainsKey("NombreUsuario"))
                            {
                                <div class="text-danger small">@validationErrors["NombreUsuario"]</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Clave *</label>
                            <InputText @bind-Value="formData.Usuario.Clave" class="form-control" />
                            @if (validationErrors.ContainsKey("Clave"))
                            {
                                <div class="text-danger small">@validationErrors["Clave"]</div>
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Direccion *</label>
                            <InputText @bind-Value="formData.Persona.Direccion" class="form-control" />
                            @if (validationErrors.ContainsKey("Direccion"))
                            {
                                <div class="text-danger small">@validationErrors["Direccion"]</div>
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Telefono *</label>
                            <InputText @bind-Value="formData.Persona.Telefono" class="form-control" />
                            @if (validationErrors.ContainsKey("Telefono"))
                            {
                                <div class="text-danger small">@validationErrors["Telefono"]</div>
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha Nacimiento *</label>
                            <InputDate @bind-Value="formData.Persona.FechaNac" class="form-control" />
                            @if (validationErrors.ContainsKey("FechaNac"))
                            {
                                <div class="text-danger small">@validationErrors["FechaNac"]</div>
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Legajo *</label>
                            <InputNumber @bind-Value="formData.Persona.Legajo" class="form-control" />
                            @if (validationErrors.ContainsKey("Legajo"))
                            {
                                <div class="text-danger small">@validationErrors["Legajo"]</div>
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Tipo Persona *</label>
                            <InputText @bind-Value="formData.Persona.TipoPersona" class="form-control" />
                            @if (validationErrors.ContainsKey("TipoPersona"))
                            {
                                <div class="text-danger small">@validationErrors["TipoPersona"]</div>
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Plan *</label>
                            <InputSelect @bind-Value="formData.Persona.IdPlan" class="form-select">
                                <option value="0">Seleccionar Plan</option>
                                @if (planes != null)
                                {
                                    @foreach (var plan in planes)
                                    {
                                        <option value="@plan.Id">@plan.Descripcion</option>
                                    }
                                }
                            </InputSelect>
                            @if (validationErrors.ContainsKey("Plan"))
                            {
                                <div class="text-danger small">@validationErrors["Plan"]</div>
                            }
                        </div>
                        <div class="mb-3 form-check">
                            <InputCheckbox @bind-Value="formData.Usuario.Habilitado" class="form-check-input" id="chkHabilitado" />
                            <label class="form-check-label" for="chkHabilitado">Habilitado</label>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="Close">Cancelar</button>
                            <button type="submit" class="btn btn-primary" disabled="@saving">
                                @if (saving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @(mode == FormMode.Add ? "Agregar" : "Actualizar")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback OnUsuarioChanged { get; set; }

    private bool showModal = false;
    private FormMode mode = FormMode.Add;
    private UsuarioPersonaViewModel formData = new UsuarioPersonaViewModel();
    private bool saving = false;
    private string errorMessage = string.Empty;
    private Dictionary<string, string> validationErrors = new Dictionary<string, string>();
    private List<PlanDTO>? planes;
    private PersonaDTO persona;


    public class UsuarioPersonaViewModel
    {
        public UsuarioDTO Usuario { get; set; } = new();
        public PersonaDTO Persona { get; set; } = new();
    }

    public enum FormMode
    {
        Add,
        Update
    }

    public async Task ShowAddModal()
    {
        mode = FormMode.Add;
        formData.Usuario = new UsuarioDTO();
        formData.Persona = new PersonaDTO();
        await LoadPlanes();
        ClearValidationErrors();
        showModal = true;
        StateHasChanged();

    }

    public async Task ShowEditModal(UsuarioDTO usuario)
    {
        mode = FormMode.Update;
        await LoadPersona(usuario.IdPersona);
        formData.Usuario = new UsuarioDTO
        {
            Id = usuario.Id,
            Nombre = usuario.Nombre,
            NombreUsuario = usuario.NombreUsuario,
            Apellido = usuario.Apellido,
            Email = usuario.Email,
            Habilitado = usuario.Habilitado,
            Clave=usuario.Clave
            
        };
        formData.Persona = new PersonaDTO
        {
            Direccion=persona.Direccion,
            Telefono=persona.Telefono,
            FechaNac=persona.FechaNac,
            Legajo=persona.Legajo,
            TipoPersona=persona.TipoPersona,
            IdPlan=persona.IdPlan

        };
        await LoadPlanes();
        ClearValidationErrors();
        showModal = true;
        StateHasChanged();

    }

    private async Task HandleValidSubmit()
    {
        if (!ValidateCliente())
            return;

        try
        {
            saving = true;
            errorMessage = string.Empty;
            formData.Persona.Nombre = formData.Usuario.Nombre;
            formData.Persona.Apellido = formData.Usuario.Apellido;
            formData.Persona.Email = formData.Usuario.Email;


            if (mode == FormMode.Add)
            {
                await UsuarioAPIClient.AddAsync(formData.Usuario,formData.Persona);
            }
            else
            {
                await UsuarioAPIClient.UpdateAsync(formData.Usuario);
            }

            await OnUsuarioChanged.InvokeAsync();
            Close();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            saving = false;
        }
    }

    private bool ValidateCliente()
    {
        ClearValidationErrors();
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(formData.Usuario.Nombre))
        {
            validationErrors["Nombre"] = "El Nombre es requerido";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(formData.Usuario.Apellido))
        {
            validationErrors["Apellido"] = "El Apellido es requerido";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(formData.Usuario.Email))
        {
            validationErrors["Email"] = "El Email es requerido";
            isValid = false;
        }
        else if (!IsValidEmail(formData.Usuario.Email))
        {
            validationErrors["Email"] = "El formato del Email no es válido";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(formData.Usuario.NombreUsuario))
        {
            validationErrors["NombreUsuario"] = "El Nombre de usuario es requerido";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(formData.Usuario.Clave))
        {
            validationErrors["Clave"] = "La Clave es requerida";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(formData.Persona.Telefono))
        {
            validationErrors["Telefono"] = "El telefono es requerido";
            isValid = false;
        }
        if (DateTime.MinValue==formData.Persona.FechaNac)
        {
            validationErrors["FechaNac"] = "Fecha de Nacimiento no valida";
            isValid = false;
        }
        if (formData.Persona.Legajo<=0)
        {
            validationErrors["Legajo"] = "El legajo es requerido";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(formData.Persona.TipoPersona))
        {
            validationErrors["TipoPersona"] = "El tipo de persona es requerido";
            isValid = false;
        }
        if (formData.Persona.IdPlan <= 0)
        {
            validationErrors["Plan"] = "Seleccione un plan";
            isValid = false;
        }


        StateHasChanged();
        return isValid;
    }

    private bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return false;
        return Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$");
    }

    private void ClearValidationErrors()
    {
        validationErrors.Clear();
        errorMessage = string.Empty;
    }

    private void Close()
    {
        showModal = false;
        ClearValidationErrors();
        StateHasChanged();
    }

    public async Task LoadPlanes()
    {
        try
        {
           planes = (await PlanAPIClient.GetAllAsync())?.ToList();
        }
        catch (Exception ex)
        {
            
            errorMessage = $"Error al cargar planes: {ex.Message}";

        }
    }
    private async Task LoadPersona(int id)
    {
        try
        {
            persona = (await PersonaAPIClient.GetAsync(id));
        }
        catch (Exception ex)
        {

            errorMessage = $"Error al cargar planes: {ex.Message}";

        }
    }
}