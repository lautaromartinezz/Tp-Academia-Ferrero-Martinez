@page "/inscripcionesCursos/{idAlumno:int}"
@using DTOs
@using API.Clients
@using Blazor.Wasm.Components
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inject NavigationManager Navigation


<PageTitle>cursos</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3>cursos</h3>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @successMessage
                    <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                </div>
            }


            @if (loading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Id</th>
                                <th>Alumno</th>
                                <th>Curso</th>
                                <th>Nota</th>
                                <th>Situacion</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (cursos != null && cursos.Any())
                            {
                                @foreach (var curso in cursos)
                                {
                                    <tr>
                                        <td>@curso.Id</td>
                                        <td>@curso.AnioCalendario</td>
                                        <td>@curso.Cupo</td>
                                        <td>@curso.DescripcionMateria</td>
                                        <td>@curso.DescripcionComision</td>

                                        <td>
                                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => OnClick(curso)">
                                                <i class="fas fa-edit"></i> Inscribirse
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int idAlumno { get; set; }
    private List<CursoDTO>? cursos;
    private bool loading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        await Loadcursos();
    }

    private async Task Loadcursos()
    {
        try
        {
            loading = true;
            cursos = (await InscripcionAPIClient.GetWithoutInscAsync(idAlumno))?.ToList();
            successMessage = string.Empty; // Clear success message when reloading
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar cursos: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }


    private async Task OnClick(CursoDTO curso)
    {

        InscripcionDTO insc = new InscripcionDTO
        {
            Nota = 0,
            Situacion = "Inscripto",
            IdAlumno = idAlumno,
            IdCurso = curso.Id,

        };

        await InscripcionAPIClient.AddAsync(insc);
        await Loadcursos();
    }


}
