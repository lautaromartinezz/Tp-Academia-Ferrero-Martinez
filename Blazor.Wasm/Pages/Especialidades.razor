@page "/especialidades"
@using DTOs
@using API.Clients
@using Blazor.Wasm.Components
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inject NavigationManager Navigation


<PageTitle>Usuarios</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3>Especialidades</h3>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @successMessage
                    <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                </div>
            }

            <div class="mb-3">
                <button class="btn btn-primary" @onclick="OpenAddModal">
                    <i class="fas fa-plus"></i> Agregar
                </button>
            </div>

            @if (loading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Id</th>
                                <th>Descripcion</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (especialidades != null && especialidades.Any())
                            {
                                @foreach (var especialidad in especialidades)
                                {
                                    <tr>
                                        <td>@especialidad.Id</td>
                                        <td>@especialidad.DescEspecialidad</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => OpenEditModal(especialidad)">
                                                <i class="fas fa-edit"></i> Editar
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(especialidad)">
                                                <i class="fas fa-trash"></i> Eliminar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>
<EspecialidadModal @ref="especialidadModal" OnUsuarioChanged="LoadEspecialidades" />

@code {
    private List<EspecialidadDTO>? especialidades;
    private bool loading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private EspecialidadModal? especialidadModal;



    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        await LoadEspecialidades();
    }
    /*
     *
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Verificar autenticación antes de cargar datos
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                Navigation.NavigateTo("/login");
                return;
            }


            await LoadEspecialidades();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
     */


    private async Task LoadEspecialidades()
    {
        try
        {
            loading = true;
            especialidades = (await EspecialidadAPIClient.GetAllAsync())?.ToList();
            successMessage = string.Empty; // Clear success message when reloading
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar especialidades: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OpenAddModal()
    {
        await especialidadModal.ShowAddModal();
    }

    private async Task OpenEditModal(EspecialidadDTO especialidad)
    {
        await especialidadModal.ShowEditModal(especialidad);
    }

    private async Task ConfirmDelete(EspecialidadDTO especialidad)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm",
            $"¿Está seguro que desea eliminar el especialidad {especialidad.Id} {especialidad.DescEspecialidad}?");

        if (confirm)
        {
            await DeleteEspecialidad(especialidad.Id);
        }
    }

    private async Task DeleteEspecialidad(int id)
    {
        try
        {
            await EspecialidadAPIClient.DeleteAsync(id);
            successMessage = "Especialidad eliminado exitosamente.";
            await LoadEspecialidades();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar especialidad: {ex.Message}";
        }
    }




}
